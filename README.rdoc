= CacheableFlash {<img src="https://codeclimate.com/badge.png" />}[https://codeclimate.com/github/pivotal/cacheable-flash] {<img src="https://secure.travis-ci.org/pboling/cacheable-flash.png?branch=master" alt="Build Status" />}[http://travis-ci.org/pboling/cacheable-flash] {<img src="http://api.coderwall.com/pboling/endorsecount.png" />}[http://coderwall.com/pboling]

== Description

This plugin enables greater levels of page caching by rendering flash
messages from a cookie using JavaScript, instead of in your Rails
view template.  Flash contents are converted to JSON and placed in
a cookie by an after_filter in a controller or a Rack middleware in
your application.

== Installation as gem

  gem 'cacheable_flash' # added to your Gemfile
  $ bundle install

== Setup

=== Without asset pipeline, or pre-Rails 3.1:

First copy the JS assets into your app:
  rails generate cacheable_flash:install

CacheableFlash adds its javascript dependencies as a Rails 3 javascript 'expansion',
which are only used if you are NOT using the asset pipeline (apparently?).

So if you have config.assets.enabled = false in application.rb then in your layout:
  javascript_include_tag :cacheable_flash

Otherwise, in your layout, just source them like normal:
  javascript_include_tag 'flash', 'js.cookie'

=== With asset pipeline (requires Rails 3.1)

The asset pipeline should have access to the assets in this gem via your app/assets/javascripts/application.js:
  //= require flash
  //= require js.cookie

== Mailing List

http://groups.google.com/group/PivotalLabsOpenSource

== Bug/Feature Tracker

https://github.com/pivotal/cacheable-flash/issues

== Wiki

Please help document!

https://github.com/pivotal/cacheable-flash/wiki

== Usage as an around filter

To use as an around filter, include the CacheableFlash module
in your controller.
It's all or none on the actions in your controller, so you can't
mix JS and HTML display of your flash message in a controller.
No other modifications to the controller are needed.  You will need
to add divs and some javascript to your view or layout templates
to render the flash in the browser.

Note that the cookie holding the flash messages is removed as the
page is displayed, so a refresh will clear the flash message (just
as happens normally).

=== Example Controller

  class MyController < ActionController::Base
    include CacheableFlash
    # ...
  end

== Usage as a Rack middleware (requires Rails 3)

To use as a Rack Middleware, swap the Rails flash middleware with the
Cacheable flash middleware.
Use this method if you set flash messages inside a rescue_from block:

  rescue_from CanCan::AccessDenied do |exception|
    redirect_to root_url, :alert => exception.message
  end

=== In your application.rb:

  # Swap the ActionDispatch::Flash middleware with the CacheableFlash one
  config.middleware.swap ActionDispatch::Flash, CacheableFlash::Middleware

== Example Template Markup

  <div id="error_div_id" class="flash flash_error"></div>
  <div id="notice_div_id" class="flash flash_notice"></div>
  <script type="text/javascript">
    Flash.transferFromCookies();
    Flash.writeDataTo('error', $('#error_div_id'));
    Flash.writeDataTo('notice', $('#notice_div_id'));
  </script>

== Security warning
The gem is susceptible to reflected XSS attack. Make sure no non-alphanumerical
user-generated content is stored inside flash messages (html or plain text).

== Testing
You can test your flash cookies by making assertions on the json of the "flash" cookie.
Cacheable Flash provides test helpers which includes the flash_cookie method.

=== Test::Unit Example
  require "cacheable_flash/test_helpers"

  class TestController < ActionController::Base
    def index
      flash["notice"] = "In index"
    end
  end

  class ControllerTest < Test::Unit::TestCase
    include CacheableFlash::TestHelpers

    def setup
      @controller = TestController.new
      @request = ActionController::TestRequest.new
      @response = ActionController::TestResponse.new
    end

    def test_cacheable_flash_action
      get :index
      assert_equal "In index", flash_cookie["notice"]
    end
  end

=== Rspec Example
  require "cacheable_flash/test_helpers"

  class TestController < ActionController::Base
    def index
      flash["notice"] = "In index"
    end
  end

  describe TestController, "#index" do
    include CacheableFlash::TestHelpers

    it "writes to the flash cookie" do
      get :index
      flash_cookie["notice"].should == "In index"
    end
  end

== Contributing to cacheable-flash

1. Fork it
2. Create your feature branch (`git checkout -b my-new-feature`)
3. Commit your changes (`git commit -am 'Added some feature'`)
4. Push to the branch (`git push origin my-new-feature`)
5. Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
6. Create new Pull Request

== Versioning

This library aims to adhere to {Semantic Versioning 2.0.0}[http://semver.org/].
Violations of this scheme should be reported as bugs. Specifically,
if a minor or patch version is released that breaks backward
compatibility, a new version should be immediately released that
restores compatibility. Breaking changes to the public API will
only be introduced with new major versions.

As a result of this policy, you can (and should) specify a
dependency on this gem using the {Pessimistic Version Constraint}[http://docs.rubygems.org/read/chapter/16#page74] with two digits of precision.

For example:

    spec.add_dependency 'cacheable_flash', '~> 4.0'

== Copyright

Licensed under the MIT License. See LICENSE for further details.

- Copyright (c) 2011-2012 {Peter H. Boling}[http://railsbling.com] {<img src="http://api.coderwall.com/pboling/endorsecount.png" />}[http://coderwall.com/pboling]
- Copyright (c) 2007-2010 {Pivotal Labs}[https://coderwall.com/team/pivotal-labs]
